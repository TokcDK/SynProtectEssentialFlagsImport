using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

namespace SynProtectEssentialFlagsImport
{
    public class Program
    {
        public static Lazy<Settings> PatchSettings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out PatchSettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynProtectEssentialFlagsImport.esp")
                .Run(args);
        }

        static readonly NpcConfiguration.Flag FlagEssential = NpcConfiguration.Flag.Essential;
        static readonly NpcConfiguration.Flag FlagProtected = NpcConfiguration.Flag.Protected;
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var excluded = PatchSettings.Value.ExcludedModsList;
            bool haveExcluded = excluded.Count > 0;

            bool checkEssentialFlag = PatchSettings.Value.CheckEssentialFlag;
            bool checkProtectedFlag = PatchSettings.Value.CheckProtectedFlag;
            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                if (npcGetter == null) continue;
                if (npcGetter.Configuration.Flags.HasFlag(FlagEssential)) continue; // skip if last edit have essential flag

                // get all edits of the npc from installed mods
                var modContexts = state.LinkCache.ResolveAllContexts<INpc, INpcGetter>(npcGetter.FormKey).ToList();

                // check both flags
                var flags = new List<NpcConfiguration.Flag>(2) { FlagEssential, FlagProtected };
                foreach(var flag in flags)
                {
                    // skip if unchecked in Settings
                    if (!checkEssentialFlag && flag == FlagEssential) continue;
                    if (!checkProtectedFlag && flag == FlagProtected) continue;

                    // skip if last edit of the npc contains the flag
                    if (npcGetter.Configuration.Flags.HasFlag(flag)) continue; 

                    // check all npc edits for the flag contain
                    foreach (var modContext in modContexts)
                    {
                        if (haveExcluded && excluded.Contains(modContext.ModKey.FileName)) continue;
                        if (!modContext.Record.Configuration.Flags.HasFlag(flag)) continue; // skip if npc record in the mod have no this flag

                        Console.WriteLine($"Found '{flag}' flag for npc '{npcGetter.FormKey.ID}|{npcGetter.EditorID}' from mod '{modContext.ModKey.FileName}'");
                        state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter).Configuration.Flags |= flag; // add the flag

                        break; // import 1st Essential flag will skip check of 2nd Protected flag
                    }
                }
            }
        }
    }
}
