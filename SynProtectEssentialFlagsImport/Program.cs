using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins.Cache;

namespace SynProtectEssentialFlagsImport
{
    public class Program
    {
        public static Lazy<Settings> PatchSettings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out PatchSettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynProtectEssentialFlagsImport.esp")
                .Run(args);
        }

        static readonly NpcConfiguration.Flag _flagEssential = NpcConfiguration.Flag.Essential;
        static readonly NpcConfiguration.Flag _flagProtected = NpcConfiguration.Flag.Protected;
        static readonly NpcConfiguration.Flag[] _protectedEssentialFlags = new NpcConfiguration.Flag[2] { _flagEssential, _flagProtected };

        static bool _needToCheckEssentialFlag;
        static bool _needToCheckProtectedFlag;
        static bool _haveExcludedForFlagCheck;
        static List<string>? _excludedForFlagCheck = null;

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Init();

            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                var npcGetterConfigurationFlags = npcGetter.Configuration.Flags;
                if (npcGetterConfigurationFlags.HasFlag(_flagEssential)) continue; // skip if last edit have essential flag
                if (!_needToCheckEssentialFlag && npcGetterConfigurationFlags.HasFlag(_flagProtected)) continue; // skip the record if not need to check essential and protected flag already added

                CheckAndSetFlagsIfNeed(npcGetter, npcGetterConfigurationFlags, state);
            }
        }

        private static void Init()
        {
            _excludedForFlagCheck = PatchSettings.Value.ExcludedModsList;
            _haveExcludedForFlagCheck = _excludedForFlagCheck.Count > 0;
            _needToCheckEssentialFlag = PatchSettings.Value.CheckEssentialFlag;
            _needToCheckProtectedFlag = PatchSettings.Value.CheckProtectedFlag;
        }

        private static void CheckAndSetFlagsIfNeed(INpcGetter npcGetter, NpcConfiguration.Flag npcGetterConfigurationFlags, IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var flag in _protectedEssentialFlags)
            {
                // skip if unchecked in Settings
                if (!_needToCheckEssentialFlag && flag == _flagEssential) continue;
                if (!_needToCheckProtectedFlag && flag == _flagProtected) continue;

                // skip if last edit of the npc contains the flag
                if (npcGetterConfigurationFlags.HasFlag(flag)) continue;

                // check all npc edits for the flag contain
                foreach (var npcModContext in state.LinkCache.ResolveAllContexts<INpc, INpcGetter>(npcGetter.FormKey)) // check all edits of the npc
                {
                    if (_haveExcludedForFlagCheck && _excludedForFlagCheck!.Contains(npcModContext.ModKey.FileName)) continue;
                    if (!npcModContext.Record.Configuration.Flags.HasFlag(flag)) continue; // skip if npc record in the mod have no this flag

                    // add flag, show console message and return
                    Console.WriteLine($"Found '{flag}' flag for npc '{npcGetter.FormKey.ID}|{npcGetter.EditorID}' which set by '{npcModContext.ModKey.FileName}' mod");
                    var npcToChange = state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter);

                    npcToChange.Configuration.Flags |= flag; // add the flag

                    if(flag == _flagEssential && npcToChange.Configuration.Flags.HasFlag(_flagProtected))
                    {
                        // remove protected flag whe essential was added
                        npcToChange.Configuration.Flags &= ~_flagProtected;
                    }

                    return; // import 1st Essential flag will skip check of 2nd Protected flag
                }
            }
        }
    }
}
